component dxlincurve "one-dimensional lookup table";
description """This component can be used to map any floating-point input to a
floating-point output. Typical uses would include linearisation of
thermocouples, defining PID gains that vary with external factors or to
substitute for any mathematical function where absolute accuracy is not
required.

The component can be thought of as a 2-dimensional graph of points in (x,y)
space joined by straight lines. The input value is located on the x axis,
followed up until it touches the line, and the output of the component is set
to the corresponding y value.

The (x,y) points are defined by the dx-NN and y-NN parameters which need
to be set in the HAL file using "setp" commands.

The maximum number if (x,y) points supported is 16.

For input values less than the x0 breakpoint the y-00 is returned. 
For x greater than the largest x-NN the yval corresponding to x-max is
returned (ie, no extrapolation is performed.)

Sample usage: loadrt lincurve count=3 personality=4,4,4 
for a set of three 4-element graphs.
 """;
pin in float x0 = 0 "x0 value";
pin in float dx-##[16 : personality] "axis breakpoints";

pin out float x-max "Maximum x in curve";
pin in float y-##[16 : personality+1] "output values to be interpolated";

pin in float in_ "The input value";
pin out float out_ "The output value";
pin io float out-io "The output value, compatible with PID gains";

// pin out float f  "f value for debugging";
// pin out signed i0 "i0 index for debugging";
// pin out signed i1 "i1 index for debugging";

option extra_setup 1;

author "Marius Alksnys, Andy Pugh";
license "GPL";

function _;

;;

FUNCTION(_){
    double x, x_sum, f;
    int i0, i1, j;
    x = in_;
//     if (x <= x0) {
//         out_ = y(0);
//         out_io = out_;
//         return;
//     }
    i0 = 0;
    i1 = 0;
    x_sum = x0;
    x_max = x0;
    for (j=0;j<personality;) {
        if (x > (x_max + dx(j))) {
            x_sum += dx(j);
            i0++;
        }
        if (x > x_max) i1++;
        x_max += dx(j);
        j++;
    }
    if (x <= x0) {
        out_ = y(0);
        out_io = out_;
        return;
    }
    if (x >= x_max) {
        out_ = y(personality);
        out_io = out_;
        return;
    }
     f = (x - x_sum)/dx(i0);
     out_ = y(i0) + f * (y(i1) - y(i0));
     out_io = out_;
}

EXTRA_SETUP(){
	if (personality > 16) personality = 16;
	if (personality < 2) personality = 2;
	return 0;
}
